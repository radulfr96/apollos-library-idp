// <auto-generated />
using System;
using ApollosLibrary.IDP.Domain.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApollosLibrary.IDP.Domain.Migrations
{
    [DbContext(typeof(ApollosLibraryIDPContext))]
    [Migration("20220702121516_AddedBanField")]
    partial class AddedBanField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResource", b =>
                {
                    b.Property<int>("ApiResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiResourceId"), 1L, 1);

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("ApiResourceId");

                    b.ToTable("ApiResources");

                    b.HasData(
                        new
                        {
                            ApiResourceId = 1,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(171),
                            Description = "Open ID",
                            DisplayName = "Open ID",
                            Enabled = true,
                            Name = "openid",
                            NonEditable = false,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            ApiResourceId = 2,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(178),
                            Description = "Apollo's Library Website",
                            DisplayName = "Apollo's Library Website",
                            Enabled = true,
                            Name = "apolloslibrarywebsite",
                            NonEditable = false,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            ApiResourceId = 3,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(181),
                            Description = "API in the IDP app to manage users",
                            DisplayName = "User API",
                            Enabled = true,
                            Name = "IdentityServerApi",
                            NonEditable = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceClaim", b =>
                {
                    b.Property<int>("ApiResourceClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiResourceClaimId"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiResourceClaimId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceClaims");

                    b.HasData(
                        new
                        {
                            ApiResourceClaimId = 1,
                            ApiResourceId = 1,
                            Type = "role"
                        },
                        new
                        {
                            ApiResourceClaimId = 2,
                            ApiResourceId = 1,
                            Type = "username"
                        },
                        new
                        {
                            ApiResourceClaimId = 3,
                            ApiResourceId = 1,
                            Type = "email"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceProperty", b =>
                {
                    b.Property<int>("ApiResourcePropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiResourcePropertyId"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiResourcePropertyId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceScope", b =>
                {
                    b.Property<int>("ApiResourceScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiResourceScopeId"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiResourceScopeId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceScopes");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceSecret", b =>
                {
                    b.Property<int>("ApiResourceSecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiResourceSecretId"), 1L, 1);

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiResourceSecretId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiResourceSecrets");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScope", b =>
                {
                    b.Property<int>("ApiScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiScopeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.HasKey("ApiScopeId");

                    b.ToTable("ApiScopes");

                    b.HasData(
                        new
                        {
                            ApiScopeId = 1,
                            Description = "Provides access to the My Library Web API",
                            DisplayName = "Apollo's Library API",
                            Emphasize = false,
                            Enabled = true,
                            Name = "apolloslibraryapi",
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            ApiScopeId = 2,
                            Description = "Provides access to the My Library User API in the IDP App",
                            DisplayName = "Apollo's Library User API",
                            Emphasize = false,
                            Enabled = true,
                            Name = "IdentityServerApi",
                            Required = true,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScopeClaim", b =>
                {
                    b.Property<int>("ApiScopeClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiScopeClaimId"), 1L, 1);

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiScopeClaimId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ApiScopeClaims");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScopeProperty", b =>
                {
                    b.Property<int>("ApiScopePropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiScopePropertyId"), 1L, 1);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiScopePropertyId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ApiScopeProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenExpiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            AbsoluteRefreshTokenLifetime = 6000,
                            AccessTokenLifetime = 6000,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = true,
                            AllowOfflineAccess = true,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = false,
                            AlwaysIncludeUserClaimsInIdToken = true,
                            AlwaysSendClientClaims = true,
                            AuthorizationCodeLifetime = 6000,
                            BackChannelLogoutSessionRequired = true,
                            ClientIdentifier = "apolloslibrarywebapp",
                            ClientName = "Apollo's Library Web App",
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(238),
                            Description = "Apollo's Library Web App",
                            DeviceCodeLifetime = 6000,
                            EnableLocalLogin = true,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = true,
                            IdentityTokenLifetime = 6000,
                            IncludeJwtId = true,
                            NonEditable = false,
                            ProtocolType = "oidc",
                            RefreshTokenExpiration = "Sliding",
                            RefreshTokenUsage = "ReUse",
                            RequireClientSecret = false,
                            RequireConsent = false,
                            RequirePkce = true,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 6000,
                            UpdateAccessTokenClaimsOnRefresh = true
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientClaim", b =>
                {
                    b.Property<int>("ClientClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientClaimId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientClaimId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClaims");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientCorsOrigin", b =>
                {
                    b.Property<int>("ClientCorsOriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientCorsOriginId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientCorsOriginId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCorsOrigins");

                    b.HasData(
                        new
                        {
                            ClientCorsOriginId = 1,
                            ClientId = 1,
                            Origin = "http://localhost:3000"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientGrantType", b =>
                {
                    b.Property<int>("ClientGrantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientGrantTypeId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientGrantTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGrantTypes");

                    b.HasData(
                        new
                        {
                            ClientGrantTypeId = 1,
                            ClientId = 1,
                            GrantType = "password"
                        },
                        new
                        {
                            ClientGrantTypeId = 2,
                            ClientId = 1,
                            GrantType = "client_credentials"
                        },
                        new
                        {
                            ClientGrantTypeId = 3,
                            ClientId = 1,
                            GrantType = "implicit"
                        },
                        new
                        {
                            ClientGrantTypeId = 4,
                            ClientId = 1,
                            GrantType = "refresh_token"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientIdPrestriction", b =>
                {
                    b.Property<int>("ClientIdPrestrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientIdPrestrictionId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientIdPrestrictionId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientIdPrestrictions");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("ClientPostLogoutRedirectUriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientPostLogoutRedirectUriId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientPostLogoutRedirectUriId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientProperty", b =>
                {
                    b.Property<int>("ClientPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientPropertyId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientPropertyId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientRedirectUri", b =>
                {
                    b.Property<int>("ClientRedirectUriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRedirectUriId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientRedirectUriId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientRedirectUris");

                    b.HasData(
                        new
                        {
                            ClientRedirectUriId = 1,
                            ClientId = 1,
                            RedirectUri = "http://localhost:3000/callback"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientScope", b =>
                {
                    b.Property<int>("ClientScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientScopeId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientScopeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientScopes");

                    b.HasData(
                        new
                        {
                            ClientScopeId = 1,
                            ClientId = 1,
                            Scope = "openid"
                        },
                        new
                        {
                            ClientScopeId = 2,
                            ClientId = 1,
                            Scope = "profile"
                        },
                        new
                        {
                            ClientScopeId = 3,
                            ClientId = 1,
                            Scope = "apolloslibraryapi"
                        },
                        new
                        {
                            ClientScopeId = 4,
                            ClientId = 1,
                            Scope = "role"
                        },
                        new
                        {
                            ClientScopeId = 5,
                            ClientId = 1,
                            Scope = "username"
                        },
                        new
                        {
                            ClientScopeId = 6,
                            ClientId = 1,
                            Scope = "email"
                        },
                        new
                        {
                            ClientScopeId = 7,
                            ClientId = 1,
                            Scope = "offline_access"
                        },
                        new
                        {
                            ClientScopeId = 8,
                            ClientId = 1,
                            Scope = "IdentityServerApi"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientSecret", b =>
                {
                    b.Property<int>("ClientSecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientSecretId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientSecretId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");

                    b.HasData(
                        new
                        {
                            ClientSecretId = 1,
                            ClientId = 1,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(312),
                            Description = "apolloslibrarywebsite",
                            Type = "SharedSecret",
                            Value = "979eb386dc9a387d614b72902e44f5cb295636d71f829d2afccff401eb794bd6"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.DeviceCode", b =>
                {
                    b.Property<string>("DeviceCodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceCodeId");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResource", b =>
                {
                    b.Property<int>("IdentityResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityResourceId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("IdentityResourceId");

                    b.ToTable("IdentityResources");

                    b.HasData(
                        new
                        {
                            IdentityResourceId = 1,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(344),
                            Description = "openid",
                            DisplayName = "Opend ID",
                            Emphasize = false,
                            Enabled = true,
                            Name = "openid",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            IdentityResourceId = 2,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(349),
                            Description = "User claims",
                            DisplayName = "User Claims",
                            Emphasize = false,
                            Enabled = true,
                            Name = "claims",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            IdentityResourceId = 3,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(351),
                            Description = "User Profile",
                            DisplayName = "User Profile",
                            Emphasize = false,
                            Enabled = true,
                            Name = "profile",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            IdentityResourceId = 4,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(354),
                            Description = "Username",
                            DisplayName = "Username",
                            Emphasize = false,
                            Enabled = true,
                            Name = "username",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            IdentityResourceId = 5,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(356),
                            Description = "User Role",
                            DisplayName = "User Role",
                            Emphasize = false,
                            Enabled = true,
                            Name = "role",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        },
                        new
                        {
                            IdentityResourceId = 6,
                            Created = new DateTime(2022, 7, 2, 22, 15, 15, 779, DateTimeKind.Local).AddTicks(359),
                            Description = "User Email",
                            DisplayName = "User Email",
                            Emphasize = false,
                            Enabled = true,
                            Name = "email",
                            NonEditable = false,
                            Required = true,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResourceClaim", b =>
                {
                    b.Property<int>("IdentityResourceClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityResourceClaimId"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentityResourceClaimId");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityResourceClaims");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResourceProperty", b =>
                {
                    b.Property<int>("IdentityResourcePropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityResourcePropertyId"), 1L, 1);

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentityResourcePropertyId");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IdentityResourceProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.PersistedGrant", b =>
                {
                    b.Property<string>("PersistedGrantKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersistedGrantKey");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SecurityCodeExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e7f12974-73dd-48d6-aa79-95fe1ded101e"),
                            CreatedBy = new Guid("e7f12974-73dd-48d6-aa79-95fe1ded101e"),
                            CreatedDate = new DateTime(2022, 7, 2, 22, 15, 15, 778, DateTimeKind.Local).AddTicks(9874),
                            IsActive = true,
                            IsBanned = false,
                            Password = "AQAAAAEAACcQAAAAECY64tCZ5CSbcXzOp4NE6XAr1TB9wQ1zgMv6Sa49QGTmEftnFXzPMsBH+NB1cu5brw==",
                            Subject = "152807d6-710c-4380-9e26-014d06745953",
                            Username = "radulfr"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.UserClaim", b =>
                {
                    b.Property<Guid>("UserClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            UserClaimId = new Guid("9eb7b29f-f5a8-493d-bc0f-29c89ffa2be8"),
                            Type = "role",
                            UserId = new Guid("e7f12974-73dd-48d6-aa79-95fe1ded101e"),
                            Value = "administrator"
                        },
                        new
                        {
                            UserClaimId = new Guid("711864cf-682d-45e4-ae36-db2f13a3fffc"),
                            Type = "role",
                            UserId = new Guid("e7f12974-73dd-48d6-aa79-95fe1ded101e"),
                            Value = "moderator"
                        },
                        new
                        {
                            UserClaimId = new Guid("e61173c3-4772-4fa6-900c-f3e7fce5a9f2"),
                            Type = "emailaddress",
                            UserId = new Guid("e7f12974-73dd-48d6-aa79-95fe1ded101e"),
                            Value = "wados.russell70@gmail.com"
                        });
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceClaim", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiResource", "ApiResource")
                        .WithMany("ApiResourceClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceProperty", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiResource", "ApiResource")
                        .WithMany("ApiResourceProperties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceScope", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiResource", "ApiResource")
                        .WithMany("ApiResourceScopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResourceSecret", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiResource", "ApiResource")
                        .WithMany("ApiResourceSecrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScopeClaim", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiScope", "Scope")
                        .WithMany("ApiScopeClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScopeProperty", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.ApiScope", "Scope")
                        .WithMany("ApiScopeProperties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientClaim", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientClaims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientCorsOrigin", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientGrantType", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientIdPrestriction", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientIdPrestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientPostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientProperty", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientProperties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientRedirectUri", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientScope", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ClientSecret", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResourceClaim", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResourceProperty", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceProperties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.UserClaim", b =>
                {
                    b.HasOne("ApollosLibrary.IDP.Domain.Model.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiResource", b =>
                {
                    b.Navigation("ApiResourceClaims");

                    b.Navigation("ApiResourceProperties");

                    b.Navigation("ApiResourceScopes");

                    b.Navigation("ApiResourceSecrets");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.ApiScope", b =>
                {
                    b.Navigation("ApiScopeClaims");

                    b.Navigation("ApiScopeProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.Client", b =>
                {
                    b.Navigation("ClientClaims");

                    b.Navigation("ClientCorsOrigins");

                    b.Navigation("ClientGrantTypes");

                    b.Navigation("ClientIdPrestrictions");

                    b.Navigation("ClientPostLogoutRedirectUris");

                    b.Navigation("ClientProperties");

                    b.Navigation("ClientRedirectUris");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.IdentityResource", b =>
                {
                    b.Navigation("IdentityResourceClaims");

                    b.Navigation("IdentityResourceProperties");
                });

            modelBuilder.Entity("ApollosLibrary.IDP.Domain.Model.User", b =>
                {
                    b.Navigation("UserClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
